{#
/**
 * @file
 * Theme override for a field.
 *
 * To override output, copy the "field.html.twig" from the templates directory
 * to your theme's directory and customize it, just like customizing other
 * Drupal templates such as page.html.twig or node.html.twig.
 *
 * Instead of overriding the theming for all fields, you can also just override
 * theming for a subset of fields using
 * @link themeable Theme hook suggestions. @endlink For example,
 * here are some theme hook suggestions that can be used for a field_foo field
 * on an article node type:
 * - field--node--field-foo--article.html.twig
 * - field--node--field-foo.html.twig
 * - field--node--article.html.twig
 * - field--field-foo.html.twig
 * - field--text-with-summary.html.twig
 * - field.html.twig
 *
 * Available variables:
 * - attributes: HTML attributes for the containing element.
 * - label_hidden: Whether to show the field label or not.
 * - title_attributes: HTML attributes for the title.
 * - label: The label for the field.
 * - multiple: TRUE if a field can contain multiple items.
 * - items: List of all the field items. Each item contains:
 *   - attributes: List of HTML attributes for each item.
 *   - content: The field item's content.
 * - entity_type: The entity type to which the field belongs.
 * - field_name: The name of the field.
 * - field_type: The type of the field.
 * - label_display: The display settings for the label.
 *
 *
 * @see template_preprocess_field()
 */
#}
<div{{ attributes.addClass(listing_type, 'grid', 'margin-bottom-lg', 'margin-top-lg') }}>
  {{ title_prefix }}
  {% if label_hidden %}
  {% else %}
    <h2 class="layout__region layout__region--header h3 top-border-thick margin-bottom-md">
      {{ label }}
    </h2>
  {% endif %}
  {{ title_suffix }}
  <div class="layout__region layout__region--listing">
    <div class="content-listing {{ view_class }}">
      <div class="item-list">
        {% block listing %}
          <ul class="listing-items">
            {% for item in items %}
              <li{{ item.attributes.addClass('field__item') }}>{{ item.content }}</li>
            {% endfor %}
          </ul>
        {% endblock %}
      </div>
    </div>
  </div>

</div>
