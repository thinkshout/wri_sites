{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--accordion-item',
    view_mode ? 'paragraph--view-mode--default',
    'pfp-accordion',
  ]
%}

{% block paragraph %}
  <div {{ attributes.addClass(classes) }}>
    <div class="pfp-accordion__trigger-wrapper">

      {# Button trigger #}
      <button class="pfp-accordion__trigger" id="pfp-accordion__head-{{ hash_id }}" data-hash="#{{ hash_id }}" aria-expanded="false" aria-controls="pfp-accordion__drawer-{{ hash_id }}">
      {% block content %}

        <a id="{{ hash_id }}"></a>

        {# Indicator #}
        <div class="pfp-accordion__indicator">
          <div class="pfp-accordion__indicator__1"></div>
          <div class="pfp-accordion__indicator__2"></div>
        </div>

        {# Title #}
        <div class="pfp-accordion__title">
          {{ content.content.field_title }}
        </div>

        {# Intro #}
        <div class="pfp-accordion__intro">
          {{ content.content.field_intro }}
        </div>

        {# Featured experts #}
        <div class="pfp-accordion__experts">
          {{ content.content.field_featured_experts }}
        </div>
      {% endblock %}
      </button>

      {# Add to any #}
      <div class="pfp-accordion__add-to-any">
        {{ content.content.wri_social_sharing_block }}
      </div>
    </div>

    {# Content drawer #}
    <div id="pfp-accordion__content-{{ hash_id }}" class="pfp-accordion__content" aria-labelledby="pfp-accordion__head-{{ hash_id }}">
      <div class="pfp-accordion__content-wrap">
        {{ content.content.field_body }}
        {{ content.content.field_related_resources }}
        {{ content.content.field_additional_resources_text }}
      </div>
    </div>
  </div>
{% endblock paragraph %}
