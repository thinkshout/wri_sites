html {
  background-color: $light-grey;
}

body {
  background-color: $white;
  margin-left: auto;
  margin-right: auto;
  max-width: $site-max-width;
  position: relative;
}

// 12-Column Grid Layout.
.grid {
  display: grid;
  grid-column-gap: $grid-gutter-mobile;
  grid-template-columns: repeat($grid-columns-mobile, 1fr);
  grid-template-rows: auto;
  margin: 0 auto;
  max-width: calc(100% - (#{$grid-gutter-mobile} * 2));
  width: 100%;

  @include mq($ph) {
    grid-template-columns: repeat($grid-columns, 1fr);
  }
  @include mq($lg) {
    grid-column-gap: $grid-gutter;
    max-width: calc(100% - (#{$grid-gutter} * 2));
  }
  @include mq($grid-max-width + ($grid-gutter * 4)) {
    max-width: $grid-max-width + ($grid-gutter * 2);
  }
  @include mq($xxl) {
    max-width: $grid-max-width-xxl + ($grid-gutter * 2);
  }

  &.no-gap {
    grid-column-gap: 0;
  }
}

// For themers to check their work against the 12-column grid guidelines.
#grid-checker {
  background: transparent;
  display: grid;
  grid-auto-rows: minmax(100%, auto);
  left: 0;
  height: 100%;
  padding: 0;
  pointer-events: none;
  position: absolute;
  right: 0;
  top: 0;
  z-index: 11;

  p {
    background: $black;
    margin: 0;
    opacity: 0.1;
    width: 100%;
  }
}

// Sets the limitations of the full site container. Do not set if you want an
// element to stretch the full width of the site.
.container {
  margin: 0 auto;
  max-width: calc(100% - (#{$grid-gutter-mobile} * 2));

  @include mq($lg) {
    max-width: calc(100% - (#{$grid-gutter} * 2));
  }
  @include mq($grid-max-width + ($grid-gutter * 4)) {
    max-width: $grid-max-width + ($grid-gutter * 2);
  }
  @include mq($xxl) {
    max-width: $grid-max-width-xxl + ($grid-gutter * 2);
  }
}

// Adds side-padding on mobile/tablet for .container and .grid.
.content-side-padding {
  padding-left: $grid-gutter-mobile;
  padding-right: $grid-gutter-mobile;
  @include mq($lg) {
    padding-left: 0;
    padding-right: 0;
  }
  @include mq($grid-max-width + ($grid-gutter * 4)) {
    padding-left: 0;
    padding-right: 0;
  }
}

// Gutenberg & Sidebars
#block-ts-wrin-content {
  position: relative;
}

#sidebar-left,
#sidebar-right {
  @include mq($md) {
    position: absolute;
    max-width: 14%;
  }
}

#sidebar-left {
  @include mq($lg) {
    margin-left: 8.2%;
  }
}

#sidebar-right {
  @include mq($md) {
    right: 0;
    top: 0;
  }

  @include mq($lg) {
    margin-right: 8.2%;
  }
}

.full-width {
  @include center-columns($grid-columns-mobile, $grid-columns-mobile);
  @include mq($ph) {
    @include center-columns($grid-columns, $grid-columns);
  }
}

.left-sidebar {
  @include center-columns($grid-columns-mobile, $grid-columns-mobile);

  @include mq($ph) {
    @include center-columns($grid-columns, $grid-columns);
  }

  @include mq($md) {
    @include column-width(1, 3);
  }

  @include mq($lg) {
    @include column-width(2, $grid-columns-mobile);
  }
}

.right-sidebar {
  @include center-columns($grid-columns-mobile, $grid-columns-mobile);

  @include mq($ph) {
    @include center-columns($grid-columns, $grid-columns);
  }

  @include mq($md) {
    @include column-width(11, 13);
  }

  @include mq($lg) {
    @include column-width(10, $grid-columns);
  }
}

.layout__region--main_content,
.layout__region--category {
  @include center-columns($grid-columns-mobile, $grid-columns-mobile);

  @include mq($ph) {
    @include center-columns($grid-columns, $grid-columns);
  }

  @include mq($md) {
    @include center-columns(8, $grid-columns);
  }

  @include mq($lg) {
    @include center-columns(6, $grid-columns);
  }
}
