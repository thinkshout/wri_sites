<?php

/**
 * @file
 * Narrative Taxonomy install and update hooks..
 */

use Drupal\Core\Utility\UpdateException;

/**
 * Updates 3+1 arguments.
 */
function wri_31block_update_8902() {
  // Load all projects with the field_narrative_taxonomy having the old value.
  $old_value = '[block_content:field_tag:target_id]/[block_content:field_custom_results:array:target_id:join:+]/[block_content:field_content_types:array:target_id:join:+]';

  $definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions('block_content', '3_1_articles');
  if (isset($definitions['field_listing'])) {
    $default_value = $definitions['field_listing']->getDefaultValueLiteral();
    $default_value_string = $default_value[0]['arguments'];

    $database = \Drupal::database();
    $database->update('block_content__field_listing')
      ->fields([
        'field_listing_arguments' => $default_value_string,
      ])
      ->condition('field_listing_arguments', $old_value)
      ->execute();
    $database->update('block_content_revision__field_listing')
      ->fields([
        'field_listing_arguments' => $default_value_string,
      ])
      ->condition('field_listing_arguments', $old_value)
      ->execute();
  }
  else {
    throw new UpdateException('This should be run after importing the field_narrative_taxonomy to the project_detail content type.');
  }

}

/**
 * Updates Listing arguments to use our config snippet for 3+1 blocks.
 */
function wri_31block_update_9501() {
  // Import the updated value:
  \Drupal::service('distro_helper.updates')->updateConfig('field.field.block_content.3_1_articles.field_listing', [
    'default_value#0#arguments',
  ], 'wri_31block');

  // Load all projects with the listing_block having the old value.
  $old_value = '[bc:field_custom_results:array:target_id:join:+]/[bc:field_content_types:array:target_id:join:+]/[bc:field_filter_by_region:target_id]/[bc:field_filter_by_resource_type:target_id]/[bc:field_tag:target_id]/[bc:field_filter_by_tag:target_id]';

  // Save all existing blocks with the new value.
  $definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions('block_content', '3_1_articles');
  if (isset($definitions['field_listing'])) {
    $default_value = $definitions['field_listing']->getDefaultValueLiteral();
    $default_value_string = $default_value[0]['arguments'];

    $database = \Drupal::database();
    $database->update('block_content__field_listing')
      ->fields([
        'field_listing_arguments' => $default_value_string,
      ])
      ->condition('field_listing_arguments', $old_value)
      ->execute();
    $database->update('block_content_revision__field_listing')
      ->fields([
        'field_listing_arguments' => $default_value_string,
      ])
      ->condition('field_listing_arguments', $old_value)
      ->execute();
  }
  else {
    throw new UpdateException('This should be run after importing the field_listing to the listing_block block type.');
  }
}

/**
 * Updates Listing arguments to allow multiple resource types.
 */
function wri_31block_update_9502() {
  // Import the updated value:
  \Drupal::service('distro_helper.updates')->updateConfig('views.view.3_1', [
    'display#default#display_options#arguments#term_node_tid_depth#break_phrase',
  ], 'wri_31block');
  \Drupal::service('distro_helper.updates')->updateConfig('content_snippets.content', [
    'snippets#3_1_view_arguments',
  ], 'wri_listing_block');
}

/**
 * Translatable field update.
 */
function wri_31block_update_10301() {
  \Drupal::service('distro_helper.updates')->updateConfig('field.field.block_content.3_1_articles.field_listing', [
    'translatable',
  ], 'wri_31block');
}
