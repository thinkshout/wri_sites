<?php

/**
 * @file
 * WRI admin functions.
 */

/**
 * Implements hook_page_attachments().
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;

/**
 * Implements hook_page_attachments().
 */
function wri_admin_page_attachments(array &$attachments) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  if ($theme == 'claro') {
    // A few css/js changes to make the backend easier to use.
    $attachments['#attached']['library'][] = 'wri_admin/admin';
  }
}

/**
 * Implements hook_form_alter().
 */
function wri_admin_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $layout_forms = [
    'layout_builder_configure_block',
    'node_layout_builder_form',
    'entity_view_display_layout_builder_form',
    'layout_builder_revert_overrides',
    'layout_builder_discard_changes',
  ];
  $simple_popup_forms = [
    'simple_popup_blocks_add_form',
    'simple_popup_blocks_edit_form',
  ];
  $build_info = $form_state->getBuildInfo();
  if (isset($build_info['base_form_id']) && in_array($build_info['base_form_id'], $layout_forms)) {
    $form['#attached']['library'][] = 'wri_admin/admin';
  }
  elseif (in_array($form_id, $layout_forms)) {
    $form['#attached']['library'][] = 'wri_admin/admin';
  }
  elseif (in_array($form_id, $simple_popup_forms)) {
    // Hiding the minimize option -- it's confusing.
    $form['minimize']['#access'] = FALSE;
    // Adding help text about the Center option being preferred.
    $form["layout"]['#description'] = t('For most cases for WRI, the recommended option is "Center"');
    // Adding a note about a cache clear.
    $form['submit']['#suffix'] = t('Note: You may need to clear the cache to see this change on the front end.');
  }
  elseif ($form_id == 'content_moderation_entity_moderation_form') {
    $node = $form_state->get('entity');
    if ($node && $node instanceof Node) {
      $published_node = Node::load($node->id());
      $form['link_to_revision'] = [
        '#title' => t('Compare to published'),
        '#type' => 'link',
        '#attributes' => [
          'target' => '_blank',
        ],
        '#url' => Url::fromRoute('diff.revisions_diff',
          [
            'node' => $node->id(),
            'left_revision' => $published_node->getLoadedRevisionId(),
            'right_revision' => $node->getLoadedRevisionId(),
            'filter' => 'visual_inline',
          ]
        ),
      ];
    }
  }

}

/**
 * Implements hook_theme().
 */
function wri_admin_theme() {
  $theme['entity_moderation_form__diff'] = [
    'base hook' => 'entity_moderation_form',
  ];

  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function wri_admin_theme_suggestions_entity_moderation_form(array $variables) {
  $suggestions = [];

  $suggestions[] = 'entity_moderation_form__diff';

  return $suggestions;
}
