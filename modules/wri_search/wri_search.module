<?php

/**
 * @file
 * Contains hsus_search.module.
 */

use Drupal\Core\Render\BubbleableMetadata;
use Drupal\search_api\Plugin\views\query\SearchApiQuery;
use Drupal\views\ViewExecutable;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_entity_base_field_info().
 */
function wri_search_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() === 'taxonomy_term') {

    // Add a field that shows the parent of the term, or itself if no parent.
    $fields['term_parent_or_self'] = BaseFieldDefinition::create('term_parent_or_self')
      ->setName('term_parent_or_self')
      ->setLabel(t('Parent or Self'))
      ->setSetting('target_type', 'taxonomy_term')
      ->setComputed(TRUE)
      ->setClass('\Drupal\wri_search\WriCalculatedTexts')
      ->setDisplayConfigurable('view', FALSE)
      ->setCardinality(-1);

    // Add a field that shows the term only if a parent set.
    $fields['term_child_of_parent'] = BaseFieldDefinition::create('term_child_of_parent')
      ->setName('term_child_of_parent')
      ->setLabel(t('Is Child'))
      ->setSetting('target_type', 'taxonomy_term')
      ->setComputed(TRUE)
      ->setClass('\Drupal\wri_search\WriCalculatedTexts')
      ->setDisplayConfigurable('view', FALSE)
      ->setCardinality(-1);

  }
    if ($entity_type->id() === "node") {
      $fields['smart_topic_parent'] = BaseFieldDefinition::create('smart_topic_parent')
        ->setName('smart_topic_parent')
        ->setLabel(t('Smart Topic'))
        ->setSetting('target_type', 'taxonomy_term')
        ->setComputed(TRUE)
        ->setClass('\Drupal\wri_search\WriCalculatedTexts')
        ->setDisplayConfigurable('view', FALSE)
        ->setCardinality(-1);
    }

    return $fields;
}

/**
 * Implements hook_token_info_alter().
 */
function wri_search_token_info_alter(&$info) {
  $info['types']['term']['non_orphan'] = [
    'name' => 'TID if Child',
    'description' => t('The term id if this term is a child.'),
  ];
}

/**
 * Implements hook_tokens().
 */
function wri_search_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type == 'term' && !empty($data['term'])) {
    $term = $data['term'];

    foreach ($tokens as $name => $original) {
      switch ($name) {

        case 'non_orphan':
          if ($term->parent->target_id) {
            $replacements[$original] = $term->id();
          }
          break;
      }
    }
  }
  return $replacements;
}
