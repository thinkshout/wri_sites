<?php

/**
 * @file
 * Provides hook implementations for wri_common.
 */

use Drupal\node\Entity\Node;
use Drupal\Core\Link;
use Drupal\Core\Render\Markup;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Url;
use Symfony\Cmf\Component\Routing\RouteObjectInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\NodeType;

/**
 * Implements hook_theme().
 */
function wri_common_theme($existing, $type, $theme, $path) {
  return [
    'wri_common_social_sharing_block' => [
      'variables' => ['items' => ''],
      'template' => 'wri-common-social-sharing-block',
      'path' => $path . '/theme',
    ],
  ];
}

/**
 * Implements hook_entity_extra_field_info().
 */
function wri_common_entity_extra_field_info() {
  $extra = [];

  foreach (NodeType::loadMultiple() as $bundle) {
    $extra['node'][$bundle->Id()]['display']['wri_social_sharing_block'] = [
      'label' => t('Social Sharing Block'),
      'description' => t('Adds a social sharing block with links to social media and print.'),
      'weight' => 1,
      'visible' => FALSE,
    ];
  }

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function wri_common_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('wri_social_sharing_block')) {
    global $base_url;
    $request = \Drupal::request();
    if ($route = $request->attributes->get(RouteObjectInterface::ROUTE_OBJECT)) {
      $title = \Drupal::service('title_resolver')->getTitle($request, $route);
    }
    else {
      $title = \Drupal::config('system.site')->get('name');
    }
    $items = [
      'title' => strip_tags($title),
      'page_url' => Url::fromRoute('<current>', [], ['absolute' => TRUE]),
      'base_url' => $base_url,
    ];
    $build['wri_social_sharing_block'] = [
      '#theme' => 'wri_common_social_sharing_block',
      '#items' => $items,
    ];
  }
}

/**
 * Helper function to change block settings.
 *
 * @param array $form
 *   Form render array.
 * @param string $bundle
 *   The bundle of the block to hide the title checkbox.
 */
function wri_common_change_block_settings(array &$form, $bundle) {
  $this_bundle = '';
  if (isset($form["block_form"]["#block"])) {
    $this_bundle = $form["block_form"]["#block"]->bundle();
  }
  elseif (isset($form['settings']["block_form"]["#block"])) {
    $this_bundle = $form['settings']["block_form"]["#block"]->bundle();
  }
  if ($this_bundle == $bundle) {
    $form['settings']['label_display']['#access'] = FALSE;
    $form['settings']['label_display']['#default_value'] = FALSE;
    $form['settings']['label']['#description'] = t('This title will not be displayed to the user.');
  }
}

/**
 * Implements hook_token_info().
 */
function wri_common_token_info() {

  $info = [];
  $info['types']['wri_tokens'] = [
    'name' => t('WRI Tokens'),
    'description' => t('Custom tokens for WRI.'),
  ];
  $info['tokens']['wri_tokens']['summary'] = [
    'name' => 'Custom Summary',
    'description' => 'A shortened version of the node body value.',
  ];
  $info['tokens']['wri_tokens']['topic_and_sub_topic_links_list'] = [
    'name' => 'Topic and Sub Topic Links List',
    'description' => 'A comma separated list with the Primary topic and Sub topic links for the node.',
  ];
  $info['tokens']['wri_tokens']['sub_topic_links_list'] = [
    'name' => 'Sub Topic Links List',
    'description' => 'A comma separated list of Sub topic links for the node\'s primary topic.',
  ];
  $info['tokens']['wri_tokens']['child_topic_links_list'] = [
    'name' => 'Child Topic Links List',
    'description' => 'A comma separated list of Topics that are children of the node\'s primary topic.',
  ];

  return $info;
}

/**
 * Implements hook_tokens().
 */
function wri_common_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type == 'wri_tokens') {
    if (isset($data['node']) && $node = $data['node']) {
      foreach ($tokens as $name => $original) {
        // Find the desired token by name.
        switch ($name) {
          // @see web/core/modules/node/node.tokens.inc
          case 'summary':
            if (isset($options['langcode'])) {
              $url_options['language'] = \Drupal::languageManager()->getLanguage($options['langcode']);
              $langcode = $options['langcode'];
            }
            else {
              $langcode = LanguageInterface::LANGCODE_DEFAULT;
            }

            $translation = \Drupal::service('entity.repository')->getTranslationFromContext($node, $langcode, ['operation' => 'node_tokens']);
            if ($translation->hasField('body') && ($items = $translation->get('body')) && !$items->isEmpty()) {
              $item = $items[0];
              $output = $item->processed;
              // Generate a trimmed summary of the body field.
              // Get the 'trim_length' size used for the 'teaser' mode, if
              // present, or use the default trim_length size.
              $display_options = \Drupal::service('entity_display.repository')
                ->getViewDisplay('node', $node->getType(), 'teaser')
                ->getComponent('body');
              if (isset($display_options['settings']['trim_length'])) {
                $length = $display_options['settings']['trim_length'];
              }
              else {
                $settings = \Drupal::service('plugin.manager.field.formatter')->getDefaultSettings('text_summary_or_trimmed');
                $length = $settings['trim_length'];
              }

              $output = text_summary($output, $item->format, $length);
              // Generate markup object to allow for html.
              $replacements[$original] = Markup::create($output);
            }
            break;

          case 'topic_and_sub_topic_links_list':
            $terms = wri_common_get_node_topics($node, FALSE);
            $replacements[$original] = _wri_common_format_list($terms);
            break;

          case 'sub_topic_links_list':
            $terms = wri_common_get_node_topics($node, TRUE);
            $replacements[$original] = _wri_common_format_list($terms);
            break;

          case 'child_topic_links_list':
            $terms = wri_common_get_node_topic_children($node);
            $replacements[$original] = _wri_common_format_list($terms);
            break;
        }
      }
    }
  }
  return $replacements;
}

/**
 * Get topics for a given node.
 *
 * @param \Drupal\node\Entity\Node $node
 *   The node object.
 * @param bool $secondary_only
 *   Should this only return secondary topics?
 *
 * @return array
 *   Array of Taxonomy Term objects.
 */
function wri_common_get_node_topics(Node $node, $secondary_only = FALSE) {
  $topics = [];
  if (!$secondary_only && $node->hasField('field_primary_topic') && ($topic_items = $node->get('field_primary_topic')) && !$topic_items->isEmpty()) {
    $topic_item = $topic_items->first()->entity;
    if ($topic_item) {
      $topics[] = $topic_item;
    }
  }
  if ($node->hasField('field_tags') && ($tag_items = $node->get('field_tags')) && !$tag_items->isEmpty()) {
    foreach ($tag_items as $tag_item) {
      if (isset($tag_item->entity) && $tag_item->entity->bundle() == 'topics_and_subtopics') {
        $topics[] = $tag_item->entity;
      }
    }
  }
  return $topics;
}

/**
 * Get child topics for a given node.
 *
 * @param \Drupal\node\Entity\Node $node
 *   The node object.
 *
 * @return array
 *   Array of Taxonomy Term objects.
 */
function wri_common_get_node_topic_children(Node $node) {
  $topics = [];
  if ($node->hasField('field_primary_topic') && ($items = $node->get('field_primary_topic')) && !$items->isEmpty()) {
    $item = $items->first()->entity;
    if ($item) {
      $vid = $item->vid->getString();
      $parent_tid = $item->tid->getString();
      $child_terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid, $parent_tid, 1, TRUE);
      if ($child_terms) {
        foreach ($child_terms as $term) {
          $topics[] = $term;
        }
      }
    }
  }
  return $topics;
}

/**
 * Formats a comma separated list of passed items with and.
 *
 * @param array $terms
 *   An array of Taxonomy Term objects.
 *
 * @return \Drupal\Component\Render\MarkupInterface|string
 *   Rendered output: a string of comma separated links or words with and.
 */
function _wri_common_format_list(array $terms) {
  $list = '';
  if ($terms) {
    foreach ($terms as $term) {
      $term_url = $term->toUrl();
      if ($term->hasField('field_full_name') && $term_label = $term->get('field_full_name')->getString()) {
        if ($term_url->toString()) {
          $term_name = Link::fromTextAndUrl($term_label, $term_url)
            ->toRenderable();
          $renderer = \Drupal::service('renderer');
          $term_name = $renderer->render($term_name);
        }
      }
      else {
        $term_name = $term->toLink()->tostring();
      }

      // If there is more than 1 term, build a list.
      if (count($terms) > 1) {
        if (!next($terms)) {
          $list .= "and $term_name";
        }
        else {
          $list .= "$term_name, ";
        }
      }
      // Otherwise just return the one term.
      else {
        $list = $term_name;
      }
    }
  }

  return Markup::create($list);
}

/**
 * Implements hook_page_attachments_alter().
 */
function wri_common_page_attachments_alter(array &$attachments) {
  $attachments['#attached']['drupalSettings']['wri_common']['gtm_id'] = content_snippets_retrieve('gtm_id');
}

/**
 * Implements hook_views_data_alter().
 */
function wri_common_views_data_alter(&$data) {
  if (isset($data['taxonomy_term_field_data'])) {
    $term_name = $data['taxonomy_term_field_data']['name'];

    // Create a new views argument for reading taxonomy term names with spaces.
    $data['taxonomy_term_field_data']['spaced_name'] = [
      'title' => t('Custom: Taxonomy name with spaces'),
      'title short' => t('Name (spaces)'),
      'field' => $term_name['field'],
      'argument' => $term_name['argument'],
      'entity field' => $term_name['entity field'],
    ];

    $data['taxonomy_term_field_data']['spaced_name']['argument']['id'] = 'string_with_space';
    $data['taxonomy_term_field_data']['spaced_name']['argument']['real field'] = 'name';
  }
}
