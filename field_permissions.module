<?php

/**
 * @file
 * Contains field_permissions.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field_permissions\FieldPermissionsService;


/**
 * Indicates that a field does not have any access control.
 */
define('FIELD_PERMISSIONS_PUBLIC', 0);

/**
 * Indicates that a field is private.
 *
 * Private fields are never displayed, and are only editable by the author (and
 * by site administrators with the 'access private fields' permission).
 */
define('FIELD_PERMISSIONS_PRIVATE', 1);

/**
 * Indicates that a field has custom permissions.
 */
define('FIELD_PERMISSIONS_CUSTOM', 2);

/**
 * Implements hook_help().
 */
function field_permissions_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.field_permissions':
      return '<p>' . t('Set field-level permissions to edit or view fields in any node, edit field during node creation, and edit or view permissions for nodes owned by the current user.') . '</p>';

    default:
  }
}

/**
 * Implements hook_entity_field_access().
 */
function field_permissions_entity_field_access($operation, FieldDefinitionInterface $field_definition, $account, FieldItemListInterface $items = NULL) {
  $context = ($operation == "view") ? 'display' : 'edit';
  if (!$field_definition->isDisplayConfigurable($context) || empty($items)) {
    return AccessResult::neutral();
  }
  $access_field = \Drupal::service('field_permissions.permissions_service')->getFieldAccess($operation, $items, $account, $field_definition);
  if (!$access_field) {
    return AccessResult::forbidden();
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see field_permissions_permissions_matrix()
 */
function field_permissions_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state) {
  $account = \Drupal::currentUser();
  /** @var \Drupal\field\FieldConfigInterface $field */
  $field = $form_state->getFormObject()->getEntity();
  if (!$account->hasPermission('admin_field_permissions')) {
    return $form;
  }
  // Remove on comment field.
  if (FieldPermissionsService::fieldIsCommentField($field)) {
    return $form;
  }

  $form['fid'] = array('#type' => 'hidden', '#value' => $field->id());
  $form['field']['field_permissions'] = array(
    '#weight' => -10,
  );
  $form['field']['field_permissions']['type'] = array(
    '#title' => t('Field visibility and permissions'),
    '#type' => 'radios',
    '#options' => array(
      FIELD_PERMISSIONS_PUBLIC => t('Public (author and administrators can edit, everyone can view)'),
      FIELD_PERMISSIONS_PRIVATE => t('Private (only author and administrators can edit and view)'),
      FIELD_PERMISSIONS_CUSTOM => t('Custom permissions'),
    ),
    '#default_value' => $field->getFieldStorageDefinition()->getThirdPartySetting('field_permissions', 'permission_type', FIELD_PERMISSIONS_PUBLIC),
  );

  field_permissions_permissions_matrix($field->getFieldStorageDefinition(), $form, $form_state);
  $form['#attached']['library'][] = 'user/drupal.user.permissions';
  $form['#attached']['library'][] = 'field_permissions/field_permissions';

  $form['actions']['submit']['#submit'][] = 'field_permission_field_config_edit_form_submit';
  $form['#entity_builders'][] = 'field_permissions_field_config_edit_form_builder';
}

/**
 * Form builder for the field config edit form.
 *
 * @see field_permissions_form_field_config_edit_form_alter
 */
function field_permissions_field_config_edit_form_builder($entity_type, \Drupal\field\FieldConfigInterface $field, array &$form, FormStateInterface $form_state) {
  $storage = $field->getFieldStorageDefinition();
  $storage->setThirdPartySetting('field_permissions', 'permission_type', $form_state->getValue('type'));
  $storage->save();
}

/**
 * Return Matrix field permission.
 *
 * @param FieldStorageDefinitionInterface $field
 *   Field to implement permissions.
 */
function field_permissions_permissions_matrix(FieldStorageDefinitionInterface $field, array &$form, FormStateInterface $form_state) {
  $roles = user_roles();
  $role_names = array_keys($roles);
  $form['role_names'] = array(
    '#type' => 'value',
    '#value' => $role_names,
  );
  $label = $field->getName();
  $permissions = FieldPermissionsService::listFieldPermissionSupport($field, $label);
  $options = array_keys($permissions);
  /*header theme table */
  $form['permissions'] = array(
    '#type' => 'table',
    '#header' => array(t('Permission')),
    '#id' => 'permissions',
    '#attributes' => ['class' => ['permissions', 'js-permissions']],
    '#sticky' => TRUE,
  );
  foreach ($role_names as $name) {
    $form['permissions']['#header'][] = array(
      'data' => $name,
      'class' => array('checkbox'),
    );
  }
  $test = \Drupal::service('field_permissions.permissions_service')->getPermissionValue();
  foreach ($permissions as $provider => $permission) {
    $form['permissions'][$provider]['description'] = array(
      '#type' => 'inline_template',
      '#template' => '<div class="permission"><span class="title">{{ title }}</span>{% if description or warning %}<div class="description">{% if warning %}<em class="permission-warning">{{ warning }}</em> {% endif %}{{ description }}</div>{% endif %}</div>',
      '#context' => array(
        'title' => $permission["title"],
      ),
    );
    $options[$provider] = '';
    foreach ($role_names as $rid => $name) {
      $form['permissions'][$provider][$name] = array(
        '#title' => $name . ': ' . $permission["title"],
        '#title_display' => 'invisible',
        '#type' => 'checkbox',
        '#attributes' => array('class' => array('rid-' . $name, 'js-rid-' . $name)),
        '#wrapper_attributes' => array(
          'class' => array('checkbox'),
        ),
      );
      if (!empty($test[$name]) && in_array($provider, $test[$name])) {
        $form['permissions'][$provider][$name]['#default_value'] = in_array($provider, $test[$name]);
      }
    }
  }
}

/**
 * Implements hook_form_submit().
 */
function field_permission_field_config_edit_form_submit(array &$form, FormStateInterface $form_state) {

  /** @var FieldDefinitionInterface $field */
  $field = $form_state->getBuildInfo()['callback_object']->getEntity();
  $custom_permissions = $form_state->getValue('permissions');
  $type_permission = $form_state->getValue("type");
  $field_name = $field->getName();

  $perm_settings = [];
  // Set all perm.
  if ($type_permission == FIELD_PERMISSIONS_CUSTOM) {
    foreach ($custom_permissions as $perm_name => $field_perm) {
      foreach ($field_perm as $role_name => $role_permission) {
        $perm_settings[$role_name][$perm_name] = $role_permission;
      }
    }
  }
  elseif ($type_permission == FIELD_PERMISSIONS_PUBLIC) {
    foreach ($custom_permissions as $perm_name => $field_perm) {
      foreach ($field_perm as $role_name => $role_permission) {
        if ($perm_name != 'view_' . $field_name) {
          $role_permission = 0;
        }
        else {
          $role_permission = 1;
        }
        $perm_settings[$role_name][$perm_name] = $role_permission;
      }
    }
  }
  elseif ($type_permission == FIELD_PERMISSIONS_PRIVATE) {
    $no_role = array('anonymous', 'authenticated');
    foreach ($custom_permissions as $perm_name => $field_perm) {
      foreach ($field_perm as $role_name => $role_permission) {
        if (in_array($role_name, $no_role) || $perm_name != 'view_own_' . $field_name && $perm_name != 'edit_own_' . $field_name) {
          $role_permission = 0;
        }
        else {
          $role_permission = 1;
        }
        $perm_settings[$role_name][$perm_name] = $role_permission;
      }
    }
  }
  foreach ($perm_settings as $roule_name => $perm) {
    user_role_change_permissions($roule_name, $perm);
  }
}
