<?php

/**
 * @file
 * Contains field_permissions.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field_permissions\FieldPermissionsService;


/**
 * Indicates that a field does not have any access control.
 *
 * Public field access is not implemented as a plugin because it effectively
 * means this module does not process any access control for fields with this
 * type of permission.
 */
define('FIELD_PERMISSIONS_PUBLIC', 'public');

/**
 * Indicates that a field is private.
 *
 * Private fields are never displayed, and are only editable by the author (and
 * by site administrators with the 'access private fields' permission).
 *
 * @todo remove this.
 */
define('FIELD_PERMISSIONS_PRIVATE', 'private');

/**
 * Indicates that a field has custom permissions.
 *
 * @todo remove this and check plugin ID directly.
 */
define('FIELD_PERMISSIONS_CUSTOM', 'custom');

/**
 * Implements hook_help().
 */
function field_permissions_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.field_permissions':
      return '<p>' . t('Set field-level permissions to edit or view fields in any node, edit field during node creation, and edit or view permissions for nodes owned by the current user.') . '</p>';

    default:
  }
}

/**
 * Implements hook_entity_field_access().
 */
function field_permissions_entity_field_access($operation, FieldDefinitionInterface $field_definition, $account, FieldItemListInterface $items = NULL) {
  $context = ($operation == 'view') ? 'display' : 'edit';
  if (!$field_definition->isDisplayConfigurable($context) || empty($items)) {
    return AccessResult::neutral();
  }
  $access_field = \Drupal::service('field_permissions.permissions_service')->getFieldAccess($operation, $items, $account, $field_definition);
  if (!$access_field) {
    return AccessResult::forbidden();
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see field_permissions_permissions_matrix()
 */
function field_permissions_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state) {
  $account = \Drupal::currentUser();
  /** @var \Drupal\field\FieldConfigInterface $field */
  $field = $form_state->getFormObject()->getEntity();
  if (!$account->hasPermission('administer field permissions')) {
    return $form;
  }
  // Remove on comment field.
  if (FieldPermissionsService::fieldIsCommentField($field)) {
    return $form;
  }

  $form['fid'] = ['#type' => 'hidden', '#value' => $field->id()];
  $form['field']['field_permissions'] = [
    '#weight' => -10,
  ];

  // Always add the public option, which isn't implemented as a plugin.
  $options = [
    FIELD_PERMISSIONS_PUBLIC => t('Public'),
  ];
  $descriptions = [
    FIELD_PERMISSIONS_PUBLIC => [
      '#description' => t('Author and administrators can edit, everyone can view.'),
    ],
  ];
  $definitions = \Drupal::service('plugin.field_permissions.types.manager')->getDefinitions();
  foreach ($definitions as $id => $plugin) {
    $options[$id] = $plugin['title'];
    $descriptions[$id] = [
      '#description' => $plugin['description'],
    ];
  }

  $form['field']['field_permissions']['type'] = [
    '#title' => t('Field visibility and permissions'),
    '#type' => 'radios',
    '#options' => $options,
    '#default_value' => $field->getFieldStorageDefinition()->getThirdPartySetting('field_permissions', 'permission_type', FIELD_PERMISSIONS_PUBLIC),
  ];

  // Add in the descriptions.
  $form['field']['field_permissions']['type'] += $descriptions;

  $form['actions']['submit']['#submit'][] = 'field_permission_field_config_edit_form_submit';
  $form['#entity_builders'][] = 'field_permissions_field_config_edit_form_builder';

  // Allow each plugin to add to or alter the form.
  foreach ($definitions as $definition) {
    /** @var \Drupal\field_permissions\Plugin\FieldPermissionTypeInterface $instance */
    $instance = \Drupal::service('plugin.field_permissions.types.manager')->createInstance($definition['id'], [], $field->getFieldStorageDefinition());
    $instance->buildAdminForm($form, $form_state, \Drupal::service('entity_type.manager')->getStorage('user_role'));
  }
}

/**
 * Form builder for the field config edit form.
 *
 * @see field_permissions_form_field_config_edit_form_alter
 */
function field_permissions_field_config_edit_form_builder($entity_type, \Drupal\field\FieldConfigInterface $field, array &$form, FormStateInterface $form_state) {
  $storage = $field->getFieldStorageDefinition();
  $storage->setThirdPartySetting('field_permissions', 'permission_type', $form_state->getValue('type'));
  $storage->save();
}

/**
 * Implements hook_form_submit().
 */
function field_permission_field_config_edit_form_submit(array &$form, FormStateInterface $form_state) {
  /** @var FieldDefinitionInterface $field */
  $field = $form_state->getFormObject()->getEntity();
  $type_permission = $form_state->getValue('type');

  if ($type_permission !== FIELD_PERMISSIONS_PUBLIC) {
    /** @var \Drupal\field_permissions\Plugin\FieldPermissionType\Manager $manager */
    $manager = \Drupal::service('plugin.field_permissions.types.manager');
    $plugin = $manager->createInstance($type_permission, [], $field->getFieldStorageDefinition());
    $plugin->submitAdminForm($form, $form_state, \Drupal::service('entity_type.manager')->getStorage('user_role'));
  }

}
